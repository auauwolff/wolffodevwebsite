---
import { Image } from "astro:assets";
import figma_log from "../../assets/images/figma_log.png";
import astro_logo from "../../assets/images/astro_logo.png";
import react_logo from "../../assets/images/react_logo.png";
import shopify_logo from "../../assets/images/shopify_logo.png";
import square_logo from "../../assets/images/square_logo.png";
---

<div class="bg-black py-20 flex flex-col items-center justify-center">
  <div class="flex flex-col items-center justify-center">
    <h1 class="text-white text-4xl font-bold lg:text-6xl">OUR TECH STACK</h1>
    <p class="text-secondary font-semibold mt-2 lg:m-4 lg:text-lg">
      Powering Your Business Success
    </p>
  </div>

  <!-- Mobile: Show swipe hint -->
  <div class="md:hidden text-center mb-6 mt-4">
    <p class="text-secondary text-sm animate-pulse">← Swipe to see more →</p>
  </div>

  <!-- Container -->
  <div class="relative w-full flex justify-center px-4 md:px-8 lg:px-12">
    <div
      id="tech-carousel"
      class="w-full max-w-xs md:max-w-6xl bg-neutral rounded-box py-8 lg:py-16 
             carousel carousel-center scroll-smooth snap-x snap-mandatory 
             overflow-x-auto md:overflow-x-hidden md:overflow-y-hidden md:flex md:justify-center md:items-stretch md:gap-4 lg:gap-6"
    >
      <!-- Spacer for centering first item on mobile only -->
      <div class="carousel-item shrink-0 md:hidden" style="width: calc(50% - 144px);"></div>
      
      <div
        class="carousel-item flex flex-col items-center justify-center w-72 md:w-auto md:flex-1 md:max-w-xs text-center snap-center shrink-0 md:shrink px-2 md:px-4"
      >
        <div class="h-20 flex items-center justify-center">
          <Image alt="Figma logo" height={60} width={60} src={figma_log} />
        </div>
        <p class="text-white text-lg font-semibold mt-4">Figma</p>
        <p class="text-secondary text-sm mt-3 px-4 min-h-[3rem]">
          A cloud-based design tool that allows for collaboration and
          prototyping.
        </p>
      </div>

      <div
        class="carousel-item flex flex-col items-center justify-center w-72 md:w-auto md:flex-1 md:max-w-xs text-center snap-center shrink-0 md:shrink px-2 md:px-4"
      >
        <div class="h-20 flex items-center justify-center">
          <Image alt="Astro logo" height={80} width={80} src={astro_logo} />
        </div>
        <p class="text-white text-lg font-semibold mt-4">Astro</p>
        <p class="text-secondary text-sm mt-3 px-4 min-h-[3rem]">
          A modern static site builder that optimizes performance and developer
          experience.
        </p>
      </div>
      
      <div
        class="carousel-item flex flex-col items-center justify-center w-72 md:w-auto md:flex-1 md:max-w-xs text-center snap-center shrink-0 md:shrink px-2 md:px-4"
      >
        <div class="h-20 flex items-center justify-center">
          <Image alt="React logo" height={80} width={80} src={react_logo} />
        </div>
        <p class="text-white text-lg font-semibold mt-4">React</p>
        <p class="text-secondary text-sm mt-3 px-4 min-h-[3rem]">
          A popular JavaScript library for building user interfaces.
        </p>
      </div>
      
      <div
        class="carousel-item flex flex-col items-center justify-center w-72 md:w-auto md:flex-1 md:max-w-xs text-center snap-center shrink-0 md:shrink px-2 md:px-4"
      >
        <div class="h-20 flex items-center justify-center">
          <Image alt="Squareup logo" height={80} width={80} src={square_logo} />
        </div>
        <p class="text-white text-lg font-semibold mt-4">Squareup</p>
        <p class="text-secondary text-sm mt-3 px-4 min-h-[3rem]">
          A payment processing platform for small businesses and online stores.
        </p>
      </div>
      
      <!-- Spacer for centering last item on mobile only -->
      <div class="carousel-item shrink-0 md:hidden" style="width: calc(50% - 144px);"></div>
    </div>
  </div>

  <!-- Carousel Indicators/Dots - Only show on mobile -->
  <div class="flex justify-center mt-8 space-x-3 md:hidden">
    <button
      class="carousel-dot w-2.5 h-2.5 rounded-full bg-primary transition-all duration-300"
      data-index="0"
      aria-label="Go to slide 1"
    ></button>
    <button
      class="carousel-dot w-2.5 h-2.5 rounded-full bg-secondary hover:bg-primary/50 transition-all duration-300"
      data-index="1"
      aria-label="Go to slide 2"
    ></button>
    <button
      class="carousel-dot w-2.5 h-2.5 rounded-full bg-secondary hover:bg-primary/50 transition-all duration-300"
      data-index="2"
      aria-label="Go to slide 3"
    ></button>
    <button
      class="carousel-dot w-2.5 h-2.5 rounded-full bg-secondary hover:bg-primary/50 transition-all duration-300"
      data-index="3"
      aria-label="Go to slide 4"
    ></button>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carousel = document.getElementById("tech-carousel");
    const dots = document.querySelectorAll(".carousel-dot");
    const items = carousel?.querySelectorAll(".carousel-item:not([style])"); // Exclude spacers with inline styles
    
    // Only apply carousel functionality on mobile/tablet (< md breakpoint)
    const isMobile = () => window.innerWidth < 768;

    if (carousel && dots.length > 0 && items && isMobile()) {
      // Calculate item width including gaps
      const getItemWidth = () => {
        const firstItem = items[0] as HTMLElement;
        if (!firstItem) return 0;
        return firstItem.offsetWidth;
      };

      // Update active dot based on scroll position
      const updateActiveDot = () => {
        const scrollLeft = carousel.scrollLeft;
        const itemWidth = getItemWidth();
        const spacer = carousel.querySelector(".carousel-item.shrink-0.lg\\:hidden") as HTMLElement;
        const spacerWidth = spacer ? spacer.offsetWidth : 0;
        
        if (itemWidth === 0) return;
        
        // Calculate which item is most visible, accounting for the spacer
        const adjustedScroll = Math.max(0, scrollLeft - spacerWidth);
        let activeIndex = Math.round(adjustedScroll / itemWidth);
        activeIndex = Math.max(0, Math.min(activeIndex, dots.length - 1));

        // Update dot styles
        dots.forEach((dot, index) => {
          if (index === activeIndex) {
            dot.classList.remove("bg-secondary", "hover:bg-primary/50");
            dot.classList.add("bg-primary");
          } else {
            dot.classList.remove("bg-primary");
            dot.classList.add("bg-secondary", "hover:bg-primary/50");
          }
        });
      };

      // Add click handlers to dots
      dots.forEach((dot, index) => {
        dot.addEventListener("click", () => {
          const itemWidth = getItemWidth();
          const spacer = carousel.querySelector(".carousel-item.shrink-0.lg\\:hidden") as HTMLElement;
          const spacerWidth = spacer ? spacer.offsetWidth : 0;
          const targetScroll = spacerWidth + (index * itemWidth);
          
          carousel.scrollTo({
            left: targetScroll,
            behavior: "smooth"
          });
        });
      });

      // Update on scroll with debouncing
      let scrollTimeout: NodeJS.Timeout;
      carousel.addEventListener("scroll", () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(updateActiveDot, 50);
      });

      // Initial update
      updateActiveDot();

      // Update on window resize
      window.addEventListener("resize", () => {
        if (isMobile()) {
          updateActiveDot();
        }
      });
    } else if (carousel && !isMobile()) {
      // Remove scroll on desktop
      carousel.style.overflowX = 'visible';
    }
  });
</script>
